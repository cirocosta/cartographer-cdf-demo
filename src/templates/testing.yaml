---
apiVersion: carto.run/v1alpha1
kind: ClusterSourceTemplate
metadata:
  name: testing
spec:
  urlPath: .status.outputs.url
  revisionPath: .status.outputs.revision

  params:
    - name: service_account
      default: default
    - name: task_name
      default: default

  ytt: |
    #@ load("@ytt:data", "data")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def service_account_name():
    #@   if hasattr(data.values.workload.spec, "serviceAccountName"):
    #@     return data.values.workload.spec.serviceAccountName
    #@   end
    #@   return data.values.params.service_account
    #@ end

    ---
    apiVersion: carto.run/v1alpha1
    kind: Runnable
    metadata:
      name: #@ data.values.workload.metadata.name
      labels: #@ merge_labels({ "app.kubernetes.io/component": "testing" })
    spec:
      serviceAccountName: #@ service_account_name()

      runTemplateRef:
        name: tekton-taskrun

      inputs:
        taskName: #@ data.values.params.task_name
        params:
          - name: blob-url
            value: #@ data.values.source.url
          - name: blob-revision
            value: #@ data.values.source.revision


---
apiVersion: carto.run/v1alpha1
kind: ClusterRunTemplate
metadata:
  name: tekton-taskrun
spec:
  outputs:
    url: spec.params[?(@.name=="blob-url")].value
    revision: spec.params[?(@.name=="blob-revision")].value

  template:
    apiVersion: tekton.dev/v1beta1
    kind: TaskRun
    metadata:
      generateName: $(runnable.metadata.name)$-
      labels: $(runnable.metadata.labels)$
    spec:
      params: $(runnable.spec.inputs.params)$
      taskRef:
        name: $(runnable.spec.inputs.taskName)$
